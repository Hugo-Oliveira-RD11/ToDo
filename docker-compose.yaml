services:
  web:
    image: nginx:latest
    volumes:
      - ./configs/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8000:80"
    depends_on:
      - api
    networks:
      - redinha

  api:
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      replicas: 2
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionsDB__UserConnection=Host=postgres;Port=5432;Database=UsersDB;Username=tests;Password=test12345
      - ConnectionsDB__TasksDatabase=mongodb://mongo:27017
      - ConnectionsDB__RefreshTokenDB=redis_token,password=redisRefresh
      - ASPNETCORE_URLS=http://+:8080
    depends_on:
      - postgres
      - mongo
      - redis_refresh_token
    networks:
      - redinha

  postgres:
    container_name: postgres
    image: postgres:17.4
    environment:
      POSTGRES_USER: tests
      POSTGRES_PASSWORD: test12345
      POSTGRES_DB: UsersDB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - redinha
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tests -d UsersDB"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongo:
    container_name: mongo
    image: mongo:latest
    volumes:
      - mongo_data:/data/db
    networks:
      - redinha
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis_refresh_token:
    container_name: redis_token
    image: redis:7.4.2-alpine
    environment:
      REDIS_PASSWORD: redisRefresh
    networks:
      - redinha
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redisRefresh", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  mongo_data:

networks:
  redinha:
    driver: bridge
